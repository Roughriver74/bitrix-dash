import { NextResponse } from 'next/server';
import { BitrixClient } from '@/lib/bitrix/client';
import { DepartmentService } from '@/lib/bitrix/services/DepartmentService';
import { TaskService } from '@/lib/bitrix/services/TaskService';
import { cache } from '@/lib/cache';
import { BitrixTask, BitrixUser, TaskStats, UserAbsenceInfo } from '@/lib/bitrix/types';
import { getConfiguredWebhookUrl, getConfiguredDepartmentName } from '@/lib/config';

const CACHE_TTL = 900; // 15 minutes

export async function GET(request: Request) {
  const startTime = Date.now();
  console.log('üöÄ API /api/bitrix/tasks - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
  
  try {
    const { searchParams } = new URL(request.url);
    const forceRefresh = searchParams.get('refresh') === 'true';

    // Check cache
    if (!forceRefresh) {
      console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞...');
      const cached = await cache.get('dashboard:tasks');
      if (cached) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', Date.now() - startTime, '–º—Å');
        return NextResponse.json(cached);
      }
      console.log('‚ùå –ö—ç—à –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');
    }

    const webhookUrl = await getConfiguredWebhookUrl();
    const departmentName = await getConfiguredDepartmentName();
    console.log('üîó Webhook URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

    const client = new BitrixClient(webhookUrl);
    const deptService = new DepartmentService(client);
    const taskService = new TaskService(client);
    
    // Get department and users
    console.log(`üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ "${departmentName}"...`);
    const department = await deptService.getDepartmentByName(departmentName);
    if (!department) {
      throw new Error(`–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç "${departmentName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    console.log(`‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${department.NAME} (ID: ${department.ID})`);

    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞...');
    const userIds = await deptService.getAllDepartmentUsers(department.ID, true);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // Get active and completed tasks with optimized filters
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...');
    const tasksStart = Date.now();
    const { activeTasks, completedTasks } = await taskService.getAllTasks(userIds);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${activeTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ ${completedTasks.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ ${Date.now() - tasksStart}–º—Å`);

    // Get user information
    console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...');
    const users = await getUsers(userIds, client);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ü–∞–≤–ª–∞ –°–≤–∏—Å—Ç—É–Ω–æ–≤–∞
    const pavel = users.find(u => u.NAME?.includes('–ü–∞–≤–µ–ª') || u.LAST_NAME?.includes('–°–≤–∏—Å—Ç—É–Ω–æ–≤'));
    if (pavel) {
      console.log('üîç –ù–∞–π–¥–µ–Ω –ü–∞–≤–µ–ª –°–≤–∏—Å—Ç—É–Ω–æ–≤:', { 
        id: pavel.ID, 
        name: `${pavel.NAME} ${pavel.LAST_NAME}` 
      });
    }

    // Skip absence information for now (API methods not available)
    console.log('üìÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
    const absences: Record<string, any> = {};

    // Generate statistics
    console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const stats = generateStats(activeTasks, completedTasks, users, absences);

    const result = {
      tasks: activeTasks,
      completedTasks,
      users,
      department,
      stats,
      absences,
      timestamp: new Date().toISOString()
    };

    // Save to cache
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à...');
    await cache.setex('dashboard:tasks', CACHE_TTL, result);

    const totalTime = Date.now() - startTime;
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${totalTime}–º—Å`);
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalActive} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ${stats.totalCompleted} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('‚ùå API Error:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    const totalTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${totalTime}–º—Å`);
    
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to fetch data' },
      { status: 500 }
    );
  }
}

async function getUsers(userIds: string[], client: BitrixClient): Promise<BitrixUser[]> {
  const users = await client.getAll<BitrixUser>('user.get', {
    filter: { ID: userIds }
  });
  
  return users.map((user: any) => ({
    ID: user.ID || user.id,
    NAME: user.NAME || user.name || '',
    LAST_NAME: user.LAST_NAME || user.lastName || '',
    EMAIL: user.EMAIL || user.email || '',
    WORK_POSITION: user.WORK_POSITION || user.workPosition || '',
    UF_DEPARTMENT: user.UF_DEPARTMENT || user.ufDepartment || [],
    ACTIVE: user.ACTIVE !== undefined ? user.ACTIVE : (user.active !== undefined ? user.active : true),
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    id: user.ID || user.id,
    name: `${user.NAME || user.name || ''} ${user.LAST_NAME || user.lastName || ''}`.trim()
  }));
}

function generateStats(activeTasks: BitrixTask[], completedTasks: BitrixTask[], users: BitrixUser[], absences: Record<string, UserAbsenceInfo>): TaskStats {
  const stats: TaskStats = {
    totalActive: activeTasks.length,
    totalCompleted: completedTasks.length,
    criticalTasks: activeTasks.filter(t => t.priority === 'critical').length,
    warningTasks: activeTasks.filter(t => t.priority === 'warning').length,
    overdueTasks: activeTasks.filter(t => t.isOverdue).length,
    inProgressTasks: activeTasks.filter(t => t.isInProgress).length,
    byEmployee: {},
    byStatus: {},
    inactivityDistribution: {
      '0-1 –¥–µ–Ω—å': 0,
      '2-3 –¥–Ω—è': 0,
      '4-7 –¥–Ω–µ–π': 0,
      '–ë–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏': 0
    }
  };

  // Employee statistics
  users.forEach(user => {
    const userId = user.ID;
    const active = activeTasks.filter(t => t.RESPONSIBLE_ID === userId);
    const completed = completedTasks.filter(t => t.RESPONSIBLE_ID === userId);
    const absenceInfo = absences[userId];
    
    stats.byEmployee[userId] = {
      name: `${user.NAME} ${user.LAST_NAME}`,
      active: active.length,
      completed: completed.length,
      critical: active.filter(t => t.priority === 'critical').length,
      warning: active.filter(t => t.priority === 'warning').length,
      overdue: active.filter(t => t.isOverdue).length,
      inProgress: active.filter(t => t.isInProgress).length,
      avgInactiveDays: active.length > 0 
        ? Math.round(active.reduce((sum, t) => sum + (t.inactiveDays || 0), 0) / active.length)
        : 0,
      isAbsent: absenceInfo?.isAbsent || false
    };
  });

  // Status statistics
  const statusMap: Record<string, string> = {
    '1': '–ù–æ–≤–∞—è',
    '2': '–ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
    '3': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
    '4': '–ñ–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è',
    '5': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    '6': '–û—Ç–ª–æ–∂–µ–Ω–∞',
    '7': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
  };

  activeTasks.forEach(task => {
    const statusName = statusMap[task.STATUS] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    stats.byStatus[statusName] = (stats.byStatus[statusName] || 0) + 1;

    // Inactivity distribution
    const days = task.inactiveDays || 0;
    if (days <= 1) stats.inactivityDistribution['0-1 –¥–µ–Ω—å']++;
    else if (days <= 3) stats.inactivityDistribution['2-3 –¥–Ω—è']++;
    else if (days <= 7) stats.inactivityDistribution['4-7 –¥–Ω–µ–π']++;
    else stats.inactivityDistribution['–ë–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏']++;
  });

  return stats;
}