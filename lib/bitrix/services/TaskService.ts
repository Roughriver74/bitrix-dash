import { BitrixClient } from '../client';
import { BitrixTask, BitrixCalendarEvent, UserAbsenceInfo } from '../types';

export class TaskService {
  constructor(private client: BitrixClient) {}

  async getAllTasks(userIds: string[]): Promise<{ activeTasks: BitrixTask[], completedTasks: BitrixTask[] }> {
    console.log(`üìã TaskService: –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    if (userIds.length === 0) {
      console.log('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã');
      return { activeTasks: [], completedTasks: [] };
    }
    
    // –î–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    console.log(`üìÖ –î–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${thirtyDaysAgo.toISOString()}`);
    
    const userChunks = this.chunkArray(userIds, 10);
    const allActiveTasks: BitrixTask[] = [];
    const allCompletedTasks: BitrixTask[] = [];
    
    for (const [index, chunk] of userChunks.entries()) {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã ${index + 1}/${userChunks.length} (${chunk.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
      console.log(`   User IDs: ${chunk.join(', ')}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ)
        console.log(`   üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...`);
        const activeStart = Date.now();
        const activeTasks = await this.client.getAllTasks({
          RESPONSIBLE_ID: chunk,
          '!STATUS': [5, 6] // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (5) –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ (6)
        });
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${activeTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ ${Date.now() - activeStart}–º—Å`);
        allActiveTasks.push(...activeTasks);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        console.log(`   ‚úîÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ 30 –¥–Ω–µ–π...`);
        const completedStart = Date.now();
        const completedTasks = await this.client.getAllTasks({
          RESPONSIBLE_ID: chunk,
          STATUS: 5, // –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
          '>=CLOSED_DATE': thirtyDaysAgo.toISOString()
        });
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${completedTasks.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ ${Date.now() - completedStart}–º—Å`);
        allCompletedTasks.push(...completedTasks);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã ${index + 1}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
      }
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${allActiveTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ${allCompletedTasks.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
    console.log('üîß –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø
    const enrichedActiveTasks = await this.enrichTasksData(allActiveTasks);
    const enrichedCompletedTasks = await this.enrichTasksData(allCompletedTasks);
    
    console.log('‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    return {
      activeTasks: enrichedActiveTasks,
      completedTasks: enrichedCompletedTasks
    };
  }

  async getAllDepartmentTasks(userIds: string[]): Promise<BitrixTask[]> {
    const { activeTasks } = await this.getAllTasks(userIds);
    return activeTasks;
  }

  async getCompletedTasks(userIds: string[], days: number = 30): Promise<BitrixTask[]> {
    console.log(`‚úîÔ∏è TaskService: –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ ${days} –¥–Ω–µ–π`);
    
    const dateFrom = new Date();
    dateFrom.setDate(dateFrom.getDate() - days);
    console.log(`üìÖ –î–∞—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º: ${dateFrom.toISOString()}`);
    
    const userChunks = this.chunkArray(userIds, 10);
    const allTasks: BitrixTask[] = [];
    
    for (const [index, chunk] of userChunks.entries()) {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã ${index + 1}/${userChunks.length} (${chunk.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
      
      try {
        const chunkStart = Date.now();
        
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
        const allUserTasks = await this.client.getAllTasks({
          RESPONSIBLE_ID: chunk
        });
        
        console.log(`   üì¶ –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ ${allUserTasks.length} –∑–∞–¥–∞—á`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const completedTasks = allUserTasks.filter((task: any) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (5 = –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
          const status = task.STATUS || task.status;
          if (status !== '5' && status !== 5) return false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è
          const closedDate = task.CLOSED_DATE || task.closedDate || task.CHANGED_DATE || task.changedDate;
          if (!closedDate) {
            console.log(`   ‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${task.ID || task.id} –±–µ–∑ –¥–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è`);
            return false;
          }
          
          const taskClosedDate = new Date(closedDate);
          const isInRange = taskClosedDate >= dateFrom;
          
          if (!isInRange) {
            console.log(`   üìÖ –ó–∞–¥–∞—á–∞ ${task.ID || task.id} –∑–∞–∫—Ä—ã—Ç–∞ ${closedDate} (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)`);
          }
          
          return isInRange;
        });
        
        console.log(`   ‚úÖ –ò–∑ –Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π: ${completedTasks.length} –∑–∞ ${Date.now() - chunkStart}–º—Å`);
        
        // –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (completedTasks.length > 0 && index === 0) {
          const firstTask = completedTasks[0];
          console.log('   üîç –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:', {
            id: firstTask.ID || firstTask.id,
            title: firstTask.TITLE || firstTask.title,
            status: firstTask.STATUS || firstTask.status,
            closedDate: firstTask.CLOSED_DATE || firstTask.closedDate,
            responsibleId: firstTask.RESPONSIBLE_ID || firstTask.responsibleId
          });
        }
        
        allTasks.push(...completedTasks);
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã ${index + 1}:`, error);
      }
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ ${allTasks.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π`);
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const enrichedTasks = await this.enrichTasksData(allTasks);
    
    return enrichedTasks;
  }

  private async enrichTasksData(tasks: BitrixTask[]): Promise<BitrixTask[]> {
    console.log(`üîß –ù–∞—á–∞–ª–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è ${tasks.length} –∑–∞–¥–∞—á`);
    const enrichedTasks: BitrixTask[] = [];
    const now = new Date();
    
    // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (—Ç–æ–ª—å–∫–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    console.log(`üìä –û–±–æ–≥–∞—â–µ–Ω–∏–µ ${tasks.length} –∑–∞–¥–∞—á...`);
    
    // –ë—ã—Å—Ç—Ä–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ CHANGED_DATE
    for (const task of tasks) {
      // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ camelCase –≤ UPPER_CASE –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const taskAny = task as any;
      const mappedTask: BitrixTask = {
        ID: taskAny.id || taskAny.ID,
        TITLE: taskAny.title || taskAny.TITLE || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        DESCRIPTION: taskAny.description || taskAny.DESCRIPTION,
        RESPONSIBLE_ID: taskAny.responsibleId || taskAny.RESPONSIBLE_ID,
        RESPONSIBLE_NAME: taskAny.responsible?.NAME 
          ? `${taskAny.responsible.NAME} ${taskAny.responsible.LAST_NAME || ''}`
          : undefined,
        CREATED_BY: taskAny.createdBy || taskAny.CREATED_BY,
        CREATED_DATE: taskAny.createdDate || taskAny.CREATED_DATE,
        CHANGED_DATE: taskAny.changedDate || taskAny.CHANGED_DATE,
        CLOSED_DATE: taskAny.closedDate || taskAny.CLOSED_DATE,
        DEADLINE: taskAny.deadline || taskAny.DEADLINE,
        STATUS: taskAny.status || taskAny.STATUS,
        PRIORITY: taskAny.priority || taskAny.PRIORITY,
        GROUP_ID: taskAny.groupId || taskAny.GROUP_ID,
        TAGS: taskAny.tags || taskAny.TAGS,
        UF_CRM_TASK: taskAny.ufCrmTask || taskAny.UF_CRM_TASK
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º CHANGED_DATE –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const lastActivity = mappedTask.CHANGED_DATE || mappedTask.CREATED_DATE;
      const lastActivityDate = new Date(lastActivity);
      const inactiveDays = Math.floor(
        (now.getTime() - lastActivityDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ (STATUS = '3')
      const isInProgress = mappedTask.STATUS === '3' || String(mappedTask.STATUS) === '3';
      let executionTime = 0;
      let executionStartDate: string | undefined;
      
      if (isInProgress) {
        // –î–ª—è –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º CHANGED_DATE
        executionStartDate = mappedTask.CHANGED_DATE || mappedTask.CREATED_DATE;
        const startDate = new Date(executionStartDate);
        executionTime = Math.floor(
          (now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)
        );
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (enrichedTasks.filter(t => t.isInProgress).length < 3) {
          console.log(`   üî∑ –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ: ${mappedTask.TITLE?.substring(0, 50)}... (ID: ${mappedTask.ID}, –≤—Ä–µ–º—è: ${executionTime} –¥–Ω–µ–π)`);
        }
      }
      
      enrichedTasks.push({
        ...mappedTask,
        lastActivity,
        inactiveDays,
        isOverdue: !!mappedTask.DEADLINE && new Date(mappedTask.DEADLINE) < now,
        priority: this.getPriorityLevel(mappedTask, inactiveDays),
        isInProgress,
        executionTime,
        executionStartDate
      });
    }
    
    console.log(`‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è ${enrichedTasks.length} –∑–∞–¥–∞—á`);
    
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–µ –ø–æ–∑–∂–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –∑–∞–¥–∞—á
    return enrichedTasks;
  }

  private getPriorityLevel(task: BitrixTask, inactiveDays: number): 'normal' | 'warning' | 'critical' {
    if (task.isOverdue || inactiveDays >= 7) return 'critical';
    if (inactiveDays >= 3) return 'warning';
    return 'normal';
  }

  async getAbsenceEvents(userIds: string[]): Promise<Record<string, UserAbsenceInfo>> {
    console.log(`üìÖ TaskService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π –¥–ª—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    const absenceInfo: Record<string, UserAbsenceInfo> = {};
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const dateFrom = new Date();
    dateFrom.setDate(today.getDate() - 7); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const dateTo = new Date();
    dateTo.setDate(today.getDate() + 30); // –ò –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π
    
    console.log(`üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: ${dateFrom.toISOString()} - ${dateTo.toISOString()}`)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    for (const userId of userIds) {
      absenceInfo[userId] = {
        userId,
        isAbsent: false
      };
    }
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userIds.length > 0) {
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIds[0]}`);
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
          const sections = await this.client.call('calendar.section.get', {
            type: 'user',
            ownerId: userIds[0]
          });
          console.log('üìÖ –°–µ–∫—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', sections);
          
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
          if (sections && Array.isArray(sections)) {
            for (const section of sections.slice(0, 2)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–µ–∫—Ü–∏–∏
              const sectionEvents = await this.client.call('calendar.event.get', {
                type: 'user',
                ownerId: userIds[0],
                section: section.ID,
                from: dateFrom.toISOString().split('T')[0],
                to: dateTo.toISOString().split('T')[0]
              });
              console.log(`üìÖ –°–æ–±—ã—Ç–∏—è –≤ —Å–µ–∫—Ü–∏–∏ "${section.NAME}" (ID: ${section.ID}):`, {
                count: sectionEvents?.length || 0,
                firstEvent: sectionEvents?.[0]
              });
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–π:', error);
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π
        console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π');
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
          const absenceChart = await this.client.call('intranet.absence.get', {
            from: dateFrom.toISOString().split('T')[0],
            to: dateTo.toISOString().split('T')[0]
          });
          console.log('üìÖ –ì—Ä–∞—Ñ–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π (intranet.absence.get):', absenceChart);
        } catch (error) {
          console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ intranet.absence.get –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        try {
          // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ timeman
          const timemanStatus = await this.client.call('timeman.status', {});
          console.log('‚è∞ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (timeman.status):', timemanStatus);
        } catch (error) {
          console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ timeman.status –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const batchCommands: any = {};
      
      userIds.forEach((userId, index) => {
        batchCommands[`user_${userId}`] = {
          method: 'calendar.event.get',
          params: {
            type: 'user',
            ownerId: userId,
            from: dateFrom.toISOString().split('T')[0],
            to: dateTo.toISOString().split('T')[0]
          }
        };
      });
      
      // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ–±—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫–æ–º–ø–∞–Ω–∏–∏
      batchCommands['company_calendar'] = {
        method: 'calendar.event.get',
        params: {
          type: 'company_calendar',
          from: dateFrom.toISOString().split('T')[0],
          to: dateTo.toISOString().split('T')[0]
        }
      };
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º batch –∑–∞–ø—Ä–æ—Å –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 50
      const commandChunks = this.chunkObject(batchCommands, 50);
      
      console.log(`üìã –í—ã–ø–æ–ª–Ω—è–µ–º ${commandChunks.length} batch –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`);
      console.log('üìù –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è batch:', {
        totalCommands: Object.keys(batchCommands).length,
        firstCommand: batchCommands[Object.keys(batchCommands)[0]]
      });
      
      for (const chunk of commandChunks) {
        try {
          const response = await this.client.call('batch', { cmd: chunk });
          
          console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç batch API:', {
            hasResult: !!response.result,
            resultKeys: response.result ? Object.keys(response.result).length : 0,
            result: response.result
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
          if (response.result_error) {
            console.error('‚ùå –û—à–∏–±–∫–∏ –≤ batch –∑–∞–ø—Ä–æ—Å–µ:', response.result_error);
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const results = response.result || {};
          for (const [key, result] of Object.entries(results)) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫–æ–º–ø–∞–Ω–∏–∏
            if (key === 'company_calendar') {
              if (result && Array.isArray(result)) {
                console.log(`   üè¢ –û–±—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–ø–∞–Ω–∏–∏: ${result.length} —Å–æ–±—ã—Ç–∏–π`);
                
                // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result.forEach((event: any) => {
                  if (event.OWNER_ID && userIds.includes(event.OWNER_ID)) {
                    const isAbsent = event.ACCESSIBILITY === 'absent' || 
                                   event.ACCESSIBILITY === 'ABSENT' ||
                                   (event.NAME && (
                                     event.NAME.toLowerCase().includes('–æ—Ç–ø—É—Å–∫') ||
                                     event.NAME.toLowerCase().includes('–±–æ–ª—å–Ω–∏—á–Ω—ã–π') ||
                                     event.NAME.toLowerCase().includes('–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞') ||
                                     event.NAME.toLowerCase().includes('–æ—Ç—Å—É—Ç—Å—Ç–≤')
                                   ));
                    
                    if (isAbsent) {
                      console.log(`   üìÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –æ–±—â–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${event.OWNER_ID}: ${event.NAME}`);
                    }
                  }
                });
              }
              continue;
            }
            
            const userId = key.replace('user_', '');
            
            if (result && Array.isArray(result)) {
              // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
              if (result.length > 0) {
                console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${result.length} —Å–æ–±—ã—Ç–∏–π`);
              }
              
              // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—É–±—Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
              
              // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∏–ø–æ–º "absent"
              const allAbsenceEvents = result.filter((event: any) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
                const isAbsent = event.ACCESSIBILITY === 'absent' || 
                                 event.ACCESSIBILITY === 'ABSENT' ||
                                 (event.NAME && (
                                   event.NAME.toLowerCase().includes('–æ—Ç–ø—É—Å–∫') ||
                                   event.NAME.toLowerCase().includes('–±–æ–ª—å–Ω–∏—á–Ω—ã–π') ||
                                   event.NAME.toLowerCase().includes('–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞') ||
                                   event.NAME.toLowerCase().includes('–æ—Ç—Å—É—Ç—Å—Ç–≤')
                                 ));
                
                // –£–±—Ä–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                
                return isAbsent;
              });
              
              // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
              
              // –ò—â–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
              const currentAbsences = allAbsenceEvents.filter((event: any) => {
                const eventStart = new Date(event.DATE_FROM);
                const eventEnd = new Date(event.DATE_TO);
                return eventStart <= today && eventEnd >= today;
              });
              
              // –ò—â–µ–º –±—É–¥—É—â–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
              const futureAbsences = allAbsenceEvents.filter((event: any) => {
                const eventStart = new Date(event.DATE_FROM);
                return eventStart > today;
              }).sort((a: any, b: any) => 
                new Date(a.DATE_FROM).getTime() - new Date(b.DATE_FROM).getTime()
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              if (currentAbsences.length > 0) {
                const currentAbsence = currentAbsences[0];
                absenceInfo[userId] = {
                  userId,
                  isAbsent: true,
                  absenceType: currentAbsence.NAME || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                  dateFrom: currentAbsence.DATE_FROM,
                  dateTo: currentAbsence.DATE_TO,
                  eventName: currentAbsence.NAME
                };
                
                console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
              if (futureAbsences.length > 0 && !absenceInfo[userId].isAbsent) {
                const nextAbsence = futureAbsences[0];
                const eventStart = new Date(nextAbsence.DATE_FROM);
                const daysUntil = Math.ceil(
                  (eventStart.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)
                );
                
                absenceInfo[userId].futureAbsence = {
                  dateFrom: nextAbsence.DATE_FROM,
                  dateTo: nextAbsence.DATE_TO,
                  eventName: nextAbsence.NAME || '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ',
                  daysUntil
                };
                
                // –£–±—Ä–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π
              }
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ batch –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π:', error);
    }
    
    const absentCount = Object.values(absenceInfo).filter(info => info.isAbsent).length;
    const futureCount = Object.values(absenceInfo).filter(info => info.futureAbsence).length;
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è—Ö: ${absentCount} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, ${futureCount} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è`);
    
    return absenceInfo;
  }

  private chunkArray<T>(array: T[], size: number): T[][] {
    const chunks: T[][] = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  }

  private chunkObject(obj: Record<string, any>, size: number): Record<string, any>[] {
    const entries = Object.entries(obj);
    const chunks: Record<string, any>[] = [];
    
    for (let i = 0; i < entries.length; i += size) {
      const chunk = entries.slice(i, i + size);
      chunks.push(Object.fromEntries(chunk));
    }
    
    return chunks;
  }
}