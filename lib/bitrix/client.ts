import { BitrixConfig } from './types';

export class BitrixClient {
  private baseUrl: string;
  
  constructor(webhookUrl: string) {
    this.baseUrl = webhookUrl;
  }

  async call<T = any>(method: string, params: any = {}): Promise<T> {
    const url = `${this.baseUrl}${method}.json`;
    
    console.log(`üåê API call: ${method}`);
    const startTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      
      const responseTime = Date.now() - startTime;
      console.log(`   ‚è±Ô∏è –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${responseTime}–º—Å`);

      if (!response.ok) {
        throw new Error(`Bitrix API error: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error_description || 'Unknown error');
      }

      return data.result;
    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error instanceof Error && error.name === 'AbortError') {
        console.error(`   ‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ${method} –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥`);
        throw new Error(`–ó–∞–ø—Ä–æ—Å ${method} –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç –≤ 30 —Å–µ–∫—É–Ω–¥`);
      }
      
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ${method}:`, error);
      throw error;
    }
  }

  async batch(commands: Record<string, any>): Promise<any> {
    return this.call('batch', {
      cmd: commands
    });
  }

  async getAll<T = any>(method: string, params: any = {}): Promise<T[]> {
    const allResults: T[] = [];
    let hasMore = true;
    let start = 0;
    const batchSize = 50;
    
    console.log(`üîÑ getAll –Ω–∞—á–∞–ª–æ –¥–ª—è –º–µ—Ç–æ–¥–∞: ${method}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å start = -1 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    while (hasMore) {
      const response = await this.call<any>(method, {
        ...params,
        start: start === 0 ? 0 : -1, // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å 0, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å -1
        limit: batchSize
      });

      let items: T[] = [];
      if (Array.isArray(response)) {
        items = response;
      } else if (response.tasks) {
        items = response.tasks;
      } else if (response.items) {
        items = response.items;
      } else if (response.result) {
        items = Array.isArray(response.result) ? response.result : [];
      }
      
      allResults.push(...items);
      console.log(`   üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—Å–µ–≥–æ: ${allResults.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
      hasMore = items.length === batchSize;
      start += batchSize;
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (allResults.length > 10000) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –±–æ–ª–µ–µ 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º');
        break;
      }
    }
    
    console.log(`‚úÖ getAll –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${allResults.length}`);
    return allResults;
  }

  async getAllTasks(filter: any = {}, select: string[] = ['*']): Promise<any[]> {
    const allTasks: any[] = [];
    let hasMore = true;
    let lastId = 0;
    let iteration = 0;
    const maxIterations = 100; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    
    console.log('üîç getAllTasks –Ω–∞—á–∞–ª–æ, —Ñ–∏–ª—å—Ç—Ä:', JSON.stringify(filter));
    
    while (hasMore && iteration < maxIterations) {
      iteration++;
      console.log(`   üìÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration}, lastId: ${lastId}`);
      
      const iterationStart = Date.now();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "ID filter" —Å start = -1 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const params: any = {
        filter: {
          ...filter
        },
        select,
        order: { ID: 'ASC' },
        limit: 50,
        start: -1  // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç total –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
      if (lastId > 0) {
        params.filter['>ID'] = lastId;
      }
      
      const tasks = await this.call<any>('tasks.task.list', params);

      const tasksList = tasks.tasks || [];
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tasksList.length} –∑–∞–¥–∞—á –∑–∞ ${Date.now() - iterationStart}–º—Å`);
      
      if (tasksList.length === 0) {
        hasMore = false;
        console.log('   üèÅ –ë–æ–ª—å—à–µ –∑–∞–¥–∞—á –Ω–µ—Ç');
      } else {
        // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
        if (iteration === 1 && tasksList.length > 0) {
          console.log('   üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏:', Object.keys(tasksList[0]));
        }
        
        allTasks.push(...tasksList);
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—è ID
        const lastTask = tasksList[tasksList.length - 1];
        const taskId = lastTask.ID || lastTask.id || lastTask.Id;
        
        if (!taskId) {
          console.error('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –∑–∞–¥–∞—á–∏:', lastTask);
          hasMore = false;
          break;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
        lastId = parseInt(taskId, 10);
        console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allTasks.length}, –Ω–æ–≤—ã–π lastId: ${lastId}`);
        
        hasMore = tasksList.length === 50;
        if (!hasMore) {
          console.log('   üèÅ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ 50 –∑–∞–¥–∞—á, –∑–∞–≤–µ—Ä—à–∞–µ–º');
        }
      }
    }
    
    if (iteration >= maxIterations) {
      console.warn(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π (${maxIterations}), –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞`);
    }
    
    console.log(`‚úÖ getAllTasks –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ–≥–æ –∑–∞–¥–∞—á: ${allTasks.length}`);
    return allTasks;
  }
}